#pragma once
#pragma once
#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <map>
using namespace std;

class Books {
public:
	Books();
	Books(string isbn_, string title_, string author_, int quantity_, int edition_, string subject_, double price_);
	~Books();
	string isbn;
	string title;
	string author;
	int quantity;
	int edition;
	string subject;
	double price;

private:

	friend class Admin;
};

class Customer {
public:
	Customer();
	~Customer();
	void customer_registration();
	void customer_login();
	void customeer_logout() ;
	void customer_cart(const string& action) ;//action: add or delete
	void customer_order(const string& action) ;//action: add, delete, or return
	void customer_change_password() ;
	void customer_forgot_password() ;

private:
	map<int, Books> cart;//hold all the books info of a cumtomer
	map<int, Books> order_history;//include deliever number and deliver date?
	friend class Admin;
};

//Order tracks all the info and details of the order.
//Admin will manage all order
//Customer will be able to see his/her orders
class Order {
public:
	void add_order() ;
	void delete_order() ;
	void view_order() ;
	void confirm_order();
private:
	void total_order();
	friend class Admin;
};

class Admin {
public:
	Admin();
	~Admin();
	//manage admin account
	void admin_login() ;
	void admin_forgot_password() ;
	void admin_edit_profile() ;
	void admin_change_password() ;
	void admin_logout() ;
	void admin_dashboard() ;

	//manage books
	void add_new_book() ;
	void edit_book(const int& isbn) ;
	void view_book(const int& isbn) ;
	void list_all_books() ;

	/*
	//manage order
	void add_new_order() ;
	void edit_order() ;
	void view_order(const int& oid) ;
	void list_all_orders() ;
	*/
	//manage customer
	void add_customer() ;
	void eidt_customer() ;
	void view_customer(const string& cid) ;
	void list_all_customers() ;

	//manage book stock
	void add_stock() ;
	void edit_stock() ;
	//need to think aboub that admin want to serch details by 
	//different way, such as category, price range, or quantity
	void view_detail_stock(const int& choice);
	void list_all_stock() ;

	//reports of the project online book store
	void report_all_orders() ;
	void report_all_customers() ;
	void report_all_stocks() ;
	bool readFile(const string& filename);
private:
	map<int, Customer> customers;
	map<int, Order> orders;
	map<string, Books> stock;
};

/*
class stock {
public:
	
private:
	friend class Admin;
};
*/

//user_interface support an interface to any user which can search a specific book by different way
//or choice login or creat an account
void user_interface(const int& choice) {
	switch (choice) {
	case 1://view speicfic book by ISBN
	case 2://view by quantity/quantity range
	case 3://view by author/author range
	case 4://view by title
	case 5://view by price/price range
	default:
		break;
}
